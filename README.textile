h1. What is it?

I have started implementing a HAML processor in the GO language.
You can find out more about HAML at "haml-lang.com":http://haml-lang.com
You can find out more about GO at "golang.org":http://golang.org

I've tried to remain diligent about reproducing the output from the canonical Ruby-based parser, so if you feel familiar with the one, then you should feel familiar with the other.

h1. Is it done?

Pretty darn close. It doesn't have scripting support because Go is not a scripting language. I'm trying to think how I want to implement this because, quite frankly, I don't think that I have the time to write an interpreter.

* Tags with
** empty content;
** attributes of the form @{:attr => "value"}@;
** id moniker using "#" (@#divId@); and,
** class moniker using "." (@.divClass@).
* Tag nesting
* Scope lookup
** Arbitrary number of keys as specified by struct (@someKeyInScope.Subkey1.Subkey2@)
** Valid as tag content (@%p= someKeyInScope@)
** Valid as tag attribute value (@%p{:attr => someKeyInScope}@)
** Valid as tag attribute name (@%p{someKeyInScope => "value"}@)
* Engine-level autoclose option (@&lt;br /&gt;@ vs. @&lt;br&gt;@)
* Tag-specific close option (@%br/@ becomes @&lt;br /&gt;@ regardless of autoclose setting)
* Whitespace removal with the @<@ operator
* Simple scripting
** Declaration and assignment of strings, floats, and ints (- varname := "value")
** Range looping construct (- for i, v := range scopeVar)

This parser hasn't the same level of error reporting as the Ruby-based parser. That, of course, comes next. I want to make sure that I have the same reporting style and type of messages that comes with the other parser.

h1. How can I install this?

Just follow the simple directions from the command line:

pre. git clone git://github.com/realistschuckle/gohaml.git gohaml
cd gohaml/lib
make install
cd ../exe
make install

h1. Wow, Five Commands? Isn't there an easier way to install this?

No. I've tried to get goinstall to play nice, but it doesn't. Therefore, for now, I'm not supporting it.

h1. How can I use it?

How about something like this? Save it, compile it, link it, and run it!

bc.. package main

import (
	"gohaml"
	"fmt"
)

func main() {
	var scope = make(map[string]interface{})
	scope["lang"] = "HAML"
	content := "I love <\n=lang<\n!"
	engine := gohaml.NewEngine(content)
	output := engine.Render(scope)
	fmt.Println(output) // Prints "I love HAML!"
}

h1. Can I use it some other way, too?

Yes, you sure can! After you install the @gohaml@ package, the @gohaml@ executable will be installed into your @$GOROOT/bin@ directory. You can just type

pre. gohaml input.haml output.html

h1. Can I type to gohaml on stdin?

Yep. And, it'll print to standard out, too. Just type @gohaml@ at the command prompt after installation and you can type all you want with a CTRL+D to signal EOF.
